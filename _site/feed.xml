<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-09-01T06:00:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Seri Lee Blog</title><subtitle>This is where I write posts about my research field.</subtitle><entry><title type="html">3D Rigid Body Motion (Part 2)</title><link href="http://localhost:4000/rigid2/" rel="alternate" type="text/html" title="3D Rigid Body Motion (Part 2)" /><published>2021-09-01T00:00:00+09:00</published><updated>2021-09-01T00:00:00+09:00</updated><id>http://localhost:4000/rigid2</id><content type="html" xml:base="http://localhost:4000/rigid2/">&lt;h1 id=&quot;rotation-vectors-and-euler-angles&quot;&gt;Rotation Vectors and Euler Angles&lt;/h1&gt;
&lt;h2 id=&quot;rotation-vectors&quot;&gt;Rotation Vectors&lt;/h2&gt;
&lt;p&gt;With a rotation matrix to describe the rotation, is it enough to use a $4 \times 4$ transformation matrix to represent a 6-degree-of-freedom 3D rigid body motion? Obviously, the matrix representation has at least the following disadvantages:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;$SO(3)$ has a rotation matrix of 9 qunatities, but a 3D rotation only has 3 degrees of freedom. Therefore, the matrix expression is redundant.&lt;/li&gt;
  &lt;li&gt;Similarly, the transformation matrix expresses 6 degree-of-freedom transformation with 16 quantities. So, is there a more compact representation?&lt;/li&gt;
  &lt;li&gt;The rotation matrix itself has constraints: it must be an orthogonal matrix with a determinant of 1. The same is true for the transformation matrix. These constraints make the solution more difficult when you want to estimate or optimize a rotation matrix/transform matrix.
Therefore, we hope that there is a way to describe rotation and translation more compactly. For example, is it feasible to express the rotation with a three-dimensional vector and express transformation with a six-dimensional vector?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously, a rotation can be described by a rotation axis and a rotation angle. Thus, we can use a vector whose direction is parallel with the axis of rotation, and the length is equal to the angle of rotation, which is called the &lt;em&gt;rotation vector&lt;/em&gt; (or angle-axis/axis-angle).&lt;/p&gt;

&lt;p&gt;Only a three-dimensional vector is needed here to describe the rotation. Similarly, we may also use a rotation vector and a translation vector and a to express a transformation for a transformation matrix. The variable at this time is exactly six dimensions.&lt;/p&gt;

&lt;p&gt;Consider a rotation represented by $R$. If described by a rotation vector, assuming that the rotation axis is a unit-length vector $n$ and the angle is $\theta$, then the vector $\theta n$ can also describe this rotation.&lt;/p&gt;

&lt;p&gt;So, we have to ask, what is the connection between the two expressions? In fact, it is not difficult to derive their conversion relationship. The conversion from the rotation vector to the rotation matrix is shown by the &lt;em&gt;Rodrigues’ formula&lt;/em&gt;. Since the derivation process is a little complicated, it is not described here. Only the result of the conversion is given.
$$ R = \cos \theta I + (1-\cos \theta) n n^T + \sin \theta n^{\wedge}$$.
The symbol $\wedge$ is a vector to skew-symmetric conversion. Conversely, we can also calculate the conversion from a rotation matrix to a rotation vector. For the corner $\theta$, taking the &lt;em&gt;trace&lt;/em&gt; of both sides, we have:
$$\begin{split} &amp;amp; tr(R) = \cos \theta tr(I) + (1-\cos \theta) tr(nn^T) + \sin \theta tr(n^{\wedge}) \\ &amp;amp; = 3 \cos \theta + (1 - \cos \theta) \\ &amp;amp; = 1+ 2 \cos \theta \end{split}$$.
Therefore, $$\theta = \arccos (\frac{tr(R) - 1}{2})$$.
Regarding the axis $n$, since the rotation axis does not change after the rotation, we have: $$Rn=n$$. So, the axis $n$ is the eigenvector corresponding to the amtrix $R$’s eigenvalue $1$. Solving this equation and normalizing it gives the axis of rotation.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.springer.com/gp/book/9789811649387&quot;&gt;Introduction to Visual SLAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>seri</name></author><category term="computer vision" /><category term="featured" /><summary type="html">Rotation Vectors and Euler Angles Rotation Vectors With a rotation matrix to describe the rotation, is it enough to use a $4 \times 4$ transformation matrix to represent a 6-degree-of-freedom 3D rigid body motion? Obviously, the matrix representation has at least the following disadvantages: $SO(3)$ has a rotation matrix of 9 qunatities, but a 3D rotation only has 3 degrees of freedom. Therefore, the matrix expression is redundant. Similarly, the transformation matrix expresses 6 degree-of-freedom transformation with 16 quantities. So, is there a more compact representation? The rotation matrix itself has constraints: it must be an orthogonal matrix with a determinant of 1. The same is true for the transformation matrix. These constraints make the solution more difficult when you want to estimate or optimize a rotation matrix/transform matrix. Therefore, we hope that there is a way to describe rotation and translation more compactly. For example, is it feasible to express the rotation with a three-dimensional vector and express transformation with a six-dimensional vector?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/rigid/1.png" /><media:content medium="image" url="http://localhost:4000/assets/images/rigid/1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">3D CNN</title><link href="http://localhost:4000/3d-cnn/" rel="alternate" type="text/html" title="3D CNN" /><published>2021-08-31T00:00:00+09:00</published><updated>2021-08-31T00:00:00+09:00</updated><id>http://localhost:4000/3d-cnn</id><content type="html" xml:base="http://localhost:4000/3d-cnn/">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jane</name></author><category term="deep learning" /><category term="featured" /><summary type="html">def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/cnn.png" /><media:content medium="image" url="http://localhost:4000/assets/images/cnn.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Homogeneous Coordinates and Projective Geometry</title><link href="http://localhost:4000/homogeneous/" rel="alternate" type="text/html" title="Homogeneous Coordinates and Projective Geometry" /><published>2021-08-31T00:00:00+09:00</published><updated>2021-08-31T00:00:00+09:00</updated><id>http://localhost:4000/homogeneous</id><content type="html" xml:base="http://localhost:4000/homogeneous/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this article, I’m going to explain homogeneous coordinates (a.k.a 4D coordinates) as simply as I can. It is now time to take a closer look at projective geometry.&lt;/p&gt;

&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;Most of the time when working with 3D, we are thinking in terms of Euclidean geometry-that is, coordinates in three-dimensional space ($X$, $Y$ and $Z$). However, there are certain situations where it is useful to think in terms of &lt;strong&gt;projective geometry&lt;/strong&gt; instead. Projective geometry has an extra dimension, called $W$, in addition to the $X$, $Y$, and $Z$ dimensions. This four-dimensional space is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projective space&lt;/code&gt; and coordinates in projective space are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homogenous coordinates&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the purposes of 3D software, the terms &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projective&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homogeous&lt;/code&gt; are basically interchangeable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4D&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;not-quaternions&quot;&gt;Not Quaternions&lt;/h2&gt;
&lt;p&gt;Quaternions look a lot like homogeneous coordinates. Both are 4D vectors, commonly depicted as $(X,Y,Z,W)$. However, quaternions and homogeneous coordinates are different concepts, with different uses.&lt;/p&gt;

&lt;h2 id=&quot;an-analogy-in-2d&quot;&gt;An Analogy in 2D&lt;/h2&gt;
&lt;p&gt;First, let’s look at how projective geometry works in 2D, before we move on to 3D.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/homo/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine a projector that is projecting a 2D image onto a screen. It’s easy to identify the $X$ and $Y$ dimensions of the projected image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/homo/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, if you step back from the 2D image and look at the projector and the screen, you can see the $W$ dimension, too. The $W$ dimension is the distance from the projector to the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/homo/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what does the $W$ dimension do, exactly? Imagine what would happen to the 2D image if you increased or decreased $W$-that is, if you increased or decreased the distance between the projector and the screen. If you move the projector closer to the screen, the whole 2D image becomes smaller. If you move the projector away from the screen, the 2D image becomes larger. As you can see, the value of $W$ affects the size (a.k.a scale) of the image.&lt;/p&gt;

&lt;h2 id=&quot;applying-it-to-3d&quot;&gt;Applying it to 3D&lt;/h2&gt;
&lt;p&gt;There is no such thing as a 3D projector (yet), so its’ harder to imagine projective geometry in 3D, but the $W$ value works exactly the same as it does in 2D. When $W$ increases, the coordinates expands (scales up). When $W$ decreases, the coordinates shrinks (scales down). The $W$ is basically a scaling transformation for the 3D coordinates.&lt;/p&gt;

&lt;h2 id=&quot;when-w--1&quot;&gt;When $W = 1$&lt;/h2&gt;
&lt;p&gt;The usual advice for 3D programming beginners is to always set $W=1$ whenever converting a 3D coordinate to 4D coordinate. The reason for that is that when you scale a coordinate by a 1 it doesn’t shrink or grow, it just stays the same size. So, when $W=1$, it has no effect on the $X$, $Y$, or $Z$ values.&lt;/p&gt;

&lt;p&gt;For this reason, when it comes to 3D computer graphics, coordinates are said to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correct&lt;/code&gt; only when $W=1$. If you tried to render with $W=0$ your program would crash when it attempted to divide by zero. With $W&amp;lt;0$ everything would flip unside-down and back-to-front.&lt;/p&gt;

&lt;p&gt;Mathematically speaking, there is no such thing as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incorrect&lt;/code&gt; homogeneous coordinate. Using coordinates with $W=1$ is just a useful convention for the 3D computer grahics.&lt;/p&gt;

&lt;h2 id=&quot;the-math&quot;&gt;The Math&lt;/h2&gt;
&lt;p&gt;Now, let’s look at some actual numbers, to see how the math works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/homo/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that the projector is $3$ meters away from the screen, and there is a dot on the 2D image at the coordinate $(15, 21)$. This gives us the projective coordinate vector $(X,Y,W) = (15,21,3)$.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/homo/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now imagine that the projector was pushed closer to the screen so that the distance was $1$ meter. The closer the project gets to the screen, the smaller the image becomes. The projector has moved three times closer, so the image becomes three times smaller. If we take the original coordinate vector and divide all the values by three, we get the new vector where $W=1$:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$$(\frac{15}{3}, \frac{21}{3}, \frac{3}{3}) = (5,7,1)$$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The dot is now at coordinate $(5,7)$. This is how an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incorrect&lt;/code&gt; homogeneous coordinate is converted to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correct&lt;/code&gt; coordinate: divide all the values by $W$. The process is exactly the same for 2D and 3D coordinates.&lt;/p&gt;

&lt;p&gt;Dividing all the values in a vector is done by a scalar multiplication with the reciprocal of the divisor. Here is a 4D example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$$\frac{1}{5}(10, 20, 30, 5) = (\frac{10}{5}, \frac{20}{5}, \frac{30}{5}, \frac{5}{5}) = (2,4,6,1)$$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;uses-of-homogeneous-coordinates-in-computer-graphics&quot;&gt;Uses of Homogeneous Coordinates in Computer Graphics&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, in regard to 3D computer graphics, homogeneous coordinates are useful in certain situations. We will look at some of those situations here.&lt;/p&gt;

&lt;h3 id=&quot;translation-matrices-for-3d-coordinates&quot;&gt;Translation Matrices for 3D Coordinates&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;A four-column matrix can only be multiplied with a four-element vector, which is why we often use homogeneous 4D vectors instead of 3D vectors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rotation and scaling transformation matrices only require three columns. But, in order to do translation, the matrices need to have at least four columns. This is why transformations are often $4 \times 4$ matices. However, a matrix with four columns cannot be multiplied by a 3D vector, due to the rules of matrix multiplication. A four-column matrix can only be mulitplied with a four-element vector, which is why we often use homogeneous 4D vectors instead of 3D vectors.&lt;/p&gt;

&lt;p&gt;The 4th dimension $W$ is usually unchanged, when using homogeneous coordinates in matrix transformation. $W$ is set to $1$ when converting 3D coordinates into 4D, and is usually still $1$ after the transformation matrices are applied, at which point it can be converted back into a 3D coordinate by ignoring $W$. This is true for all translation, rotation, and scaling transformations, which by far are the most common types of transformations. The notable exception is projection matrices, which do affect the $W$ dimension.&lt;/p&gt;

&lt;h3 id=&quot;perspective-transformation&quot;&gt;Perspective Transformation&lt;/h3&gt;
&lt;p&gt;In 3D, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perspective&lt;/code&gt; is the phenomenon where an object appears smaller the further away it is from the camera. A far-away mountain can appear to be smaller than a cat, if the cat is close enough to the camera.&lt;/p&gt;

&lt;p&gt;Perspective is implemented in 3D computer graphics by using a transformation matrix that changes the $W$ element of each vertex. After the camera matrix is applied to each vertex, but before the projection matrix is applied, the $Z$ element of each vertex represents the distance away from the camera. Therefore, the larger $Z$ is, the more the vertex should be scaled down. The $W$ dimension affects the scale, so the projection matrix just changes the $W$ based on the $Z$ value. Here is an example of a perspective projection matrix being applied to a homogeneous coordinate:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$$ \begin{bmatrix} 1&amp;amp;0&amp;amp;0&amp;amp;0 \\ 0&amp;amp;1&amp;amp;0&amp;amp;0&amp;amp; \\ 0&amp;amp;0&amp;amp;1&amp;amp;0 \\ 0&amp;amp;0&amp;amp;1&amp;amp;0 \end{bmatrix} \begin{bmatrix} 2 \\ 3 \\ 4 \\ 1\end{bmatrix} = \begin{bmatrix} 2 \\ 3 \\ 4 \\ 1 \end{bmatrix} $$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice how the $W$ value is changed to $4$, which comes from the $Z$ value.&lt;/p&gt;

&lt;p&gt;After the perspective projection matrix is applied, each vertex undergoes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perspective division&lt;/code&gt;. Perspective division is just a specific term for converting the homogeneous coordinate back to $W=1$, as explained earlier in the article. Continuing with the example above, the perspective division step would look like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$$\frac{1}{4}(2,3,4,4) = (0.5,0.75, 1,1)$$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After perspective division, the $W$ value is discarded, and we are left with a 3D coordinate that has been correctly scaled according to a 3D perspective projection.&lt;/p&gt;

&lt;h3 id=&quot;positioning-directional-lights&quot;&gt;Positioning Directional Lights&lt;/h3&gt;

&lt;p&gt;One property of homogeneous coordinates is that they allow you to have points at infinity (infinite length vectors), which is not possible with 3D coordinates. Points at infinity occur when $W=0$. If you try to convert a $W=0$ homogeneous coordinate into a normal $W=1$ coordinate, it results in a bunch of divide-by-zero operations:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$$ \frac{1}{0}(2,3,4,0) = (\frac{2}{0}, \frac{3}{0}, \frac{4}{0}, \frac{0}{0})$$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that homogeneous coordinates with $W=0$ can not be converted back into 3D coordinates.&lt;/p&gt;

&lt;p&gt;What use does this have? Well, directional lights can be thought of as point lights that are infinitely far away. When a point light is infinitely far away, the rays of light become parallel, and all of the light travels in a single direction. This is basically the definition of a directional light.&lt;/p&gt;

&lt;p&gt;So, traditionally, in 3D graphics, directional lights are differentiated from point lights by the value of $W$ in the position vector of the light. If $W=1$, then it is a point light. If $W=0$, then it is a directional light.&lt;/p&gt;

&lt;p&gt;This is more of a traditional convention, rather than a useful way to write lighting code. Directional lights and point lights are usually implemented with separate code, because they behave differently.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Homogeneous coordinates have an extra dimension called $W$, which scales the $X$, $Y$, and $Z$ dimensions. Matrices for translation and perspective projection can only be applied to homogeneous coordinates, which is why they are so common in 3D computer graphics. The $X$, $Y$, and $Z$ values are said to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correct&lt;/code&gt; when $W=1$. Any homogeneous coordinates can be converted to have $W=1$ by dividing all four dimensions by the $W$ value, except if $W=0$. When $W=0$, the coordinate represents a point at infinity (a vector with infinite length), and this is often used to denote the direction of directional lights.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tomdalling.com/blog/modern-opengl/explaining-homogenous-coordinates-and-projective-geometry/&quot;&gt;Tomdalling’s Blog Post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://staff.fnwi.uva.nl/r.vandenboomgaard/IPCV20172018/LectureNotes/MATH/homogenous.html&quot;&gt;Image Processing and Computer Vision Lecture Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>seri</name></author><category term="computer vision" /><category term="sticky" /><summary type="html">Introduction In this article, I’m going to explain homogeneous coordinates (a.k.a 4D coordinates) as simply as I can. It is now time to take a closer look at projective geometry.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/home.png" /><media:content medium="image" url="http://localhost:4000/assets/images/home.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">3D Point Cloud Processing</title><link href="http://localhost:4000/point-cloud/" rel="alternate" type="text/html" title="3D Point Cloud Processing" /><published>2021-08-31T00:00:00+09:00</published><updated>2021-08-31T00:00:00+09:00</updated><id>http://localhost:4000/point-cloud</id><content type="html" xml:base="http://localhost:4000/point-cloud/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This blog post is best suited for those who have basic familiarity with image-based 2D object detection networks and are interesting in learning how the standard methods used in 2D object detection networks are used and tailored towards point cloud 3D object detection task.&lt;/p&gt;</content><author><name>seri</name></author><category term="computer vision" /><summary type="html">Introduction This blog post is best suited for those who have basic familiarity with image-based 2D object detection networks and are interesting in learning how the standard methods used in 2D object detection networks are used and tailored towards point cloud 3D object detection task.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/point.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/point.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">3D Rigid Body Motion (Part 1)</title><link href="http://localhost:4000/rigid/" rel="alternate" type="text/html" title="3D Rigid Body Motion (Part 1)" /><published>2021-08-31T00:00:00+09:00</published><updated>2021-08-31T00:00:00+09:00</updated><id>http://localhost:4000/rigid</id><content type="html" xml:base="http://localhost:4000/rigid/">&lt;blockquote&gt;
  &lt;p&gt;The goal of this article is to introduce the rigid body geometry in 3-dimensional space: rotation matrix, transformation matrix, quaternion, and Euler angle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, I will introduce one of the fundamental problems of visual SLAM: How to describe a rigid body’s motion in 3-dimensional space? Intuitively, we certainly know that this consists of one rotation plus one translation. The translation part does not really have any problems, but the rotation part is questionable. I will introduce the meaning of rotation matrices, quaternions, Euler angles and how they are computed and transformed.&lt;/p&gt;

&lt;h2 id=&quot;rotation-matrix&quot;&gt;Rotation Matrix&lt;/h2&gt;
&lt;h3 id=&quot;points-vectors-and-coordinate-systems&quot;&gt;Points, Vectors, and Coordinate Systems&lt;/h3&gt;
&lt;p&gt;The space of our daily life is 3-dimensional, so we are born to be used to 3D movements. The 3D space consists of three axes, so the position of one spatial point can be specified by three coordinates. However, we should now consider a rigid body, which has its &lt;em&gt;position&lt;/em&gt; and &lt;em&gt;orientation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The camera can also be viewed as a rigid body in three dimensions, so what we care about in Visual SLAM are the problem of the camera’s position and orientation. Combined, we can say, “the camera is at the $(0,0,0)$ point, facing the front”. Let’s describe this in a mathematical term.&lt;/p&gt;

&lt;p&gt;We start from the basic content: &lt;em&gt;points&lt;/em&gt; and &lt;em&gt;vectors&lt;/em&gt;. Points are the basic element in space, no length, no volume. Connecting the two points forms a vector. A vector can be thought of as an arrow pointing from one point to another. Here we need to warn you not to confuse the vector with its coordinates.&lt;/p&gt;

&lt;p&gt;A vector is one thing in space, such as $a$. Here, $a$ does not need to be associated with several real numbers. We can naturally talk about the plus or minus operation of two vectors, without relating to any real numbers.&lt;/p&gt;

&lt;p&gt;Only when we specify a coordinate system in this 3D space can we talk about the vector’s coordinates in this system, finding several real numbers corresponding to this vector.&lt;/p&gt;

&lt;p&gt;With the knowledge of linear algebra, the coordinates of a point in 3D space can be described as $\mathbb{R}^3$. How to do we describe this? Suppose that in this linear space, we fined a set of base $(e_1, e_2, e_3)$, then, an arbitrary vector $a$ has a &lt;em&gt;coordinate&lt;/em&gt; under this base:&lt;/p&gt;

&lt;p&gt;$$ a = \begin{bmatrix} e_1 &amp;amp; e_2 &amp;amp; e_3 \end{bmatrix} \begin{bmatrix} a_1 \\ a_2 \\ a_3 \end{bmatrix} = a_1 e_1 + a_2 e_2 + a_3 e_3 $$.
Here, $(a_1, a_2, a_3)^T$ is called $a$’s coordinates. The coordinates’ specific values are related to the vector itself and the selection of the bases. In $\mathbb{R}^3$, the coordinate system usually consists of $3$ orthogonal coordinate axes (it can also be non-orthogonal, but it is rare in practice).&lt;/p&gt;

&lt;p&gt;For example, given $x$ and $y$ axis, the $z$ axis can be determined using the right-hand (or left-hand) rule. According to different definitions, the coordinate system is divided into left-handed and right-handed. The third axis of the left-hand rule is opposite to the right-hand rule. Most 3D libraries use right-handed coordinates.&lt;/p&gt;

&lt;p&gt;Based on basic linear algebra knowledge, we can talk about the operations between vectors/vectors, vectors/numbers, such as scalar multiplication, vector addition, subtraction, inner product, outer product and so on.&lt;/p&gt;

&lt;p&gt;For $a,b \in \mathbb{R}^3$, the inner product of $a,b$ can be written as:
$$ a \cdot b = a^Tb = \sum_{i=1}^3 a_i b_i = |a||b| \cos(&amp;lt;a,b&amp;gt;)$$, 
where $ &amp;lt;a.b&amp;gt; $ refers to the angle between the vector $a, b$. The inner product can also describe the projection relationship between vectors.&lt;/p&gt;

&lt;p&gt;$$ a \times b = \begin{Vmatrix} e_1 &amp;amp; e_2 &amp;amp; e_3 \\ a_1 &amp;amp; a_2 &amp;amp; a_3 \\ b_1 &amp;amp; b_2 &amp;amp; b_3 \end{Vmatrix} = \begin{bmatrix} a_2b_3 - a_3 b_2 \\ a_3 b_1 - a_1 b_3 \\ a_1 b_2 - a_2 b_1 \end{bmatrix} = \begin{bmatrix} 0 &amp;amp; -a_3 &amp;amp; a_2 \\ a_3 &amp;amp; 0 &amp;amp; -a_1 \\ -a_2 &amp;amp; a_1 &amp;amp; 0 \end{bmatrix} b =  a \wedge b$$.
The result of the outer product is a vector whose direction is perpendicular to the two vectors, and the length is 
$|a||b|\sin(&amp;lt;a,b&amp;gt;)$
, which is also the area of the quadrilateral of the two vectors.&lt;/p&gt;

&lt;p&gt;From the outer product operation, we introduce the $\wedge$ operator here, which means writing $a$ as a &lt;em&gt;skew-symmetric matrix&lt;/em&gt;. You can take $\wedge$ as a skew-symmetric symbol. It turns the outer product $a \times b$ into the multiplication of the matrix and the vector $a \wedge b$ is a linear operation.&lt;/p&gt;

&lt;p&gt;This symbol will be used frequently in the following sections. It is a one-to-one mapping, meaning that for any vector, it corresponds to a unique anti-symmetric matrix, and vice versa:&lt;/p&gt;

&lt;p&gt;$$ a \wedge = \begin{bmatrix} 0 &amp;amp; -a_3 &amp;amp; a_2 \\ a_3 &amp;amp; 0 &amp;amp; -a_1 \\ -a_2 &amp;amp; a_1 &amp;amp; 0 \end{bmatrix}$$.
At the same time, note that the vector operations such as addition, subtraction, inner and outer products can be calculated even when we do not have their coordinates. For example, although the inner product can be expressed by the sum of the two vectors’ product when we know the coordinates, the length and angle can also be calculated even if their coordinates are unknown. Therefore, the inner product result of the two vectors is independent of the selection of the coordinate system.&lt;/p&gt;

&lt;h3 id=&quot;euclidean-transforms-between-coordinate-systems&quot;&gt;Euclidean Transforms between Coordinate Systems&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/rigid/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We often define a variety of coordinate systems in the real scene. In robotics, you define one coordinate system for each link and joint; in 3D mapping, we also define a coordinate system for each cuboid and cylinder.&lt;/p&gt;

&lt;p&gt;If we consider a moving robot, it is common practice to set a stationary inertial coordinate system (or world coordinate system), such as the $x_W, y_W, z_W$ defined in the picture above.&lt;/p&gt;

&lt;p&gt;Meanwhile, the camera or robot is a moving coordinate system, such as coordinate system defined by $x_C, y_C, z_C$. We might ask: a vector $p$ in the camera system may have coordinates $p_c$; and in the world coordinate system, its coordinates maybe $p_w$. Then what is the conversion between two coordinates?&lt;/p&gt;

&lt;p&gt;It is necessary to first obtain the coordinate values of the point in the camera system and then use the transform rule to do the coordinate transform. We need a mathematical way to describe this transformation. As we will see later, we can describe it with a transform matrix $T$.&lt;/p&gt;

&lt;p&gt;Intuitively, the motion between two coordinate systems consists of a rotation plus a translation, which is called &lt;em&gt;rigid body motion&lt;/em&gt;. Obviously, the camera movement is rigid. During the rigid body motion, the length and angle of the vector will not change.&lt;/p&gt;

&lt;p&gt;Imagine that you throw your phone into the air and there may be differences in spatial position and orientation. But the length and the angle of each face will not change. At this point, we say that the phone’s motion is &lt;em&gt;Euclidean&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The Euclidean transform consists of rotation and translation. Let’s first consider the rotation. We have a unit-length orthogonal base $(e_1, e_2, e_3)$. After a rotation it becomes $(e_1’, e_2’, e_3’)$. Then, for the same vector $a$ (the vector does not move with the rotation of the coordinate system). its coordinates in these two coordinate systems are $[a_1, a_2, a_3]^T$ and $[a_1’, a_2’, a_3]^T$. Because the vector itself has not changed, according to the definition of coordinates, there are:&lt;/p&gt;

&lt;p&gt;$$ [e_1, e_2, e_3] \begin{bmatrix} a_1 \\ a_2 \\ a_3 \end{bmatrix} = [e_1’, e_2’, e_3’] \begin{bmatrix} a_1’ \\ a_2’ \\ a_3’ \end{bmatrix}$$.
To describe the relationship between the two coordinates, we multiply the left and right side of the above equation by $\begin{bmatrix} e_1^T \\ e_2^T \\ e_3^T \end{bmatrix}$, then the matrix on the left becomes an identity matrix, so:&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix} a_1 \\ a_2 \\ a_3 \end{bmatrix} \triangleq Ra’$$.
We take the intermediate matrix out and define it as a matrix $R$. This matrix consists of the inner product between the two sets of bases, describing the same vector’s coordinate transformation relationship before and after the rotation.&lt;/p&gt;

&lt;p&gt;It can be said that the matrix $R$ describes the rotation itself. So we call it the &lt;em&gt;rotation matrix&lt;/em&gt;. Meanwhile, the components of the matrix are the inner product of the two coordinate system bases.&lt;/p&gt;

&lt;p&gt;Since the base vector’s length is $1$, it is actually the cosine of the angle between the base vectors. So this matrix is also called &lt;em&gt;direction cosine matrix&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The rotation matrix has some special properties. In fact, it is an &lt;em&gt;orthogonal&lt;/em&gt; matrix with a determinant of $1$. Conversely, an orthogonal matrix with a determinant of 1 is also a rotation matrix. So you can define a set of $n$ dimensional rotation matrices as follows:&lt;/p&gt;

&lt;p&gt;$$SO(n) = \{ R \in \mathbb{R}^{n \times n}| RR^T = I, det(R) =1 \} $$.
$SO(n)$ refers to the special orthogonal group. This set consists of a rotation matrix of $n$ dimensional space, in particular, $SO(3)$ refers to the rotation of the three-dimensional space. In this way, we can talk directly about the rotation transformation between the two coordinate systems without having to start from the bases.&lt;/p&gt;

&lt;p&gt;Since the rotation matrix is orthogonal, its inverse (i.e., transpose) describes an opposite rotation. According to the above definition, there are:
$$a’ = R^{-1}a = R^Ta$$.
Obviously, the $R^T$ represents an opposite rotation.&lt;/p&gt;

&lt;p&gt;In the Euclidean transformation, there is a translation in addition to rotation. Consider the vector $a$ in the world coordinate system. After a rotation (depicted by $R$) and a translation of $t$, we get $a’$. Then we can put the rotation and translation together, and have:
$$a’= Ra+t$$,
where $t$ is called a translation vector.&lt;/p&gt;

&lt;p&gt;Compared to the rotation, the translation part simply adds the translation vector to the coordinates after the rotation, which si very simple. By the above formula, we completely describe the coordinate transformation relationship using a rotation matrix $R$ and a translation vector $t$.&lt;/p&gt;

&lt;p&gt;In practice, we may define the coordinate system 1 and 2, then the vector $a$ under the two coordinates is $a_1, a_2$. The relationship between the two systems should be: 
$$a_1 = R_{12} a_2 + t_{12}$$.
Here, $R_{12}$ means the “rotation of the vector from system 2 to system 1”. About $t_{12}$, readers may just take it as a translation vector without wondering about its physical meaning. In fact, it corresponds to a vector from the system 1’s origin pointing to system 2’s origin, and the coordinates are taken under tsystem 1. So I suggest you to understand it as “a vector from 1 to 2”.&lt;/p&gt;

&lt;p&gt;But the reverse $t_{21}$, which is a vector from $2$’s origin to $1$’s origin, whose &lt;em&gt;coordinates are taken in system $2$&lt;/em&gt;, is not equal to $-t_{12}$. It is also related to the rotation of the two systems.&lt;/p&gt;

&lt;p&gt;Therefore, when beginners ask the question “What are my coordinates?”, we need to clearly explain this sentence’s meaning. Here, “my coordinates” normally refers to the vector from the world system $W$ pointing to the origin of the camera system $C$, and then take the coordinates in the world’s base. Corresponding to the mathematical symbol, it should be the value of $t_{WC}$. For the same reason, it is not $-t_{CW}$ but actually $-R^T_{CW} t_{CW}$.&lt;/p&gt;

&lt;h3 id=&quot;transform-matrix-and-homogeneous-coordinates&quot;&gt;Transform Matrix and Homogeneous Coordinates&lt;/h3&gt;
&lt;p&gt;The formula $a’ = Ra+t$ fully expresses the rotation and the translation of Euclidean space, but there is still a small problem: the transformation relationship here is not a linear relationship.&lt;/p&gt;

&lt;p&gt;Suppose we made two transformations: $R_1,t_1$ and $R_2,t_2$:
$$b = R_1 a + t_1, c = R_2 b + t_2$$. 
So the transformation from $a$ to $c$ is: $$c = R_2 (R_1 a + t_1) + t_2$$.
This form is not elegant after multiple transformations. Therefore, we introduce homogeneous coordinates and transformation matrices, rewriting the formula:
$$ \begin{bmatrix} a’ \\ 1 \end{bmatrix} = \begin{bmatrix} R &amp;amp; t \\ 0^T &amp;amp; 1 \end{bmatrix} \begin{bmatrix} a \\ 1 \end{bmatrix} \triangleq T \begin{bmatrix} a \\ 1 \end{bmatrix}$$. 
This is a mathematical trick: we add $1$ at the end of the 3D vector and turn it into a 4D vector called &lt;em&gt;homogeneous coordinates&lt;/em&gt;. For this four-dimensional vector, we can write the rotation and translation matrix, making the whole relationship a linear relationship. In this formula, the matrix $T$ is called &lt;em&gt;transform matrix&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We temporarily use $\tilde{a}$ to represent the homogeneous coordinates of $a$. Then, relying on homogeneous coordinates and transformation matrices, the superposition of the two transformations can have a good form: 
$$\tilde{b} = T_1 \tilde{a}, \tilde{c} = T_2 \tilde{b} \Rightarrow T_2 T_1 \tilde{a}$$.
But the symbols that distinguish between homogeneous and non-homogeneous coordinates are annoying, because here we only need to add 1 at the end of the vector or remove 1 to turn it into a normal vector. So, without ambiguity, we will write it directly as $b = Ta$ and by default we just assume a homogeneous coordinate conversion is made if needed.&lt;/p&gt;

&lt;p&gt;The transformation matrix $T$ has a special structure: the upper left corner is the rotation matrix, the right side is the translation vector, the lower-left corner is $0$ vector, and the lower right corner is $1$. This set of transform matrix is also known as the &lt;em&gt;special Euclidean group&lt;/em&gt;: 
$$SE(3) = \{ T = \begin{bmatrix} R &amp;amp; t \\ 0^T &amp;amp; 1 \end{bmatrix} \in \mathbb{R}^{4 \times 4}| R \in SO(3), t \in \mathbb{R}^3 \}$$.
Like $SO(3)$, the inverse of the transformation matrix represents an inverse transformation: 
$$T^{-1} = \begin{bmatrix} R^T &amp;amp;  -R^T t \\ 0^T &amp;amp; 1 \end{bmatrix}$$.
Again, we use the notation of $T_{12}$ to represent a transformation from 2 to 1. Because the conversion between homogeneous and non-homogeneous coordinates is actually very easy, it is assumed that the conversion from homogeneous coordinates to normal coordinates is already done.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;First, we introduced the vector and its coordinate representation and introduced the operation between the vectors; then, the motion between the coordinate systems is described by the Euclidean transformation, which consists of translation and rotation. The rotation can be described by the rotation matrix $SO(3)$, while the translation is directly described by an $\mathbb{R}^3$ vector. Finally, if the translation and rotation are placed in a matrix, the transformation matrix $SE(3)$ is formed.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.springer.com/gp/book/9789811649387&quot;&gt;Introduction to Visual SLAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>seri</name></author><category term="computer vision" /><category term="featured" /><summary type="html">The goal of this article is to introduce the rigid body geometry in 3-dimensional space: rotation matrix, transformation matrix, quaternion, and Euler angle.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/rigid.png" /><media:content medium="image" url="http://localhost:4000/assets/images/rigid.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tree of Codes</title><link href="http://localhost:4000/tree-of-codes/" rel="alternate" type="text/html" title="Tree of Codes" /><published>2019-01-27T00:00:00+09:00</published><updated>2019-01-27T00:00:00+09:00</updated><id>http://localhost:4000/tree-of-codes</id><content type="html" xml:base="http://localhost:4000/tree-of-codes/">&lt;p&gt;The first mass-produced book to deviate from a rectilinear format, at least in the United States, is thought to be this 1863 edition of Red Riding Hood, cut into the shape of the protagonist herself with the troublesome wolf curled at her feet. Produced by the Boston-based publisher Louis Prang, this is the first in their “Doll Series”, a set of five “die-cut” books, known also as shape books — the other titles being Robinson Crusoe, Goody Two-Shoes (also written by Red Riding Hood author Lydia Very), Cinderella, and King Winter.&lt;/p&gt;

&lt;p&gt;As for this particular rendition of Charles Perrault’s classic tale, the text and design is by Lydia Very (1823-1901), sister of Transcendentalist poet Jones Very. The gruesome ending of the original — which sees Little Red Riding Hood being gobbled up as well as her grandmother — is avoided here, the gore giving way to the less bloody aims of the morality tale, and the lesson that one should not disobey one’s mother.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It would seem the claim could also extend to die cut books in general, as we can’t find anything sooner, but do let us know in the comments if you have further light to shed on this! Such books are, of course, still popular in children’s publishing today, though the die cutting is not now limited to mere outlines, as evidenced in a beautiful 2014 version of the same Little Red Riding Hood story.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An 1868 Prang catalogue would later claim that such “books in the shape of a regular paper Doll… originated with us”.&lt;/p&gt;

&lt;p&gt;The die cut has also been employed in the non-juvenile sphere as well, a recent example being Jonathan Safran Foer’s ambitious Tree of Codes.&lt;/p&gt;</content><author><name>sal</name></author><category term="Jekyll" /><category term="tutorial" /><summary type="html">The first mass-produced book to deviate from a rectilinear format, at least in the United States, is thought to be this 1863 edition of Red Riding Hood, cut into the shape of the protagonist herself with the troublesome wolf curled at her feet. Produced by the Boston-based publisher Louis Prang, this is the first in their “Doll Series”, a set of five “die-cut” books, known also as shape books — the other titles being Robinson Crusoe, Goody Two-Shoes (also written by Red Riding Hood author Lydia Very), Cinderella, and King Winter.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/python.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/python.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Powerful things you can do with the Markdown editor</title><link href="http://localhost:4000/powerful-things-markdown-editor/" rel="alternate" type="text/html" title="Powerful things you can do with the Markdown editor" /><published>2019-01-24T00:00:00+09:00</published><updated>2019-01-24T00:00:00+09:00</updated><id>http://localhost:4000/powerful-things-markdown-editor</id><content type="html" xml:base="http://localhost:4000/powerful-things-markdown-editor/">&lt;p&gt;There are lots of powerful things you can do with the Markdown editor&lt;/p&gt;

&lt;p&gt;If you’ve gotten pretty comfortable with writing in Markdown, then you may enjoy some more advanced tips about the types of things you can do with Markdown!&lt;/p&gt;

&lt;p&gt;As with the last post about the editor, you’ll want to be actually editing this post as you read it so that you can see all the Markdown code we’re using.&lt;/p&gt;

&lt;h2 id=&quot;special-formatting&quot;&gt;Special formatting&lt;/h2&gt;

&lt;p&gt;As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;strike through&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;==highlight==&lt;/li&gt;
  &lt;li&gt;*escaped characters*&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;writing-code-blocks&quot;&gt;Writing code blocks&lt;/h2&gt;

&lt;p&gt;There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;like this&lt;/code&gt;. Larger snippets of code can be displayed across multiple lines using triple back ticks:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.my-link {
    text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to get really fancy, you can even add syntax highlighting using Rouge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3.jpg&quot; alt=&quot;walking&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference-lists&quot;&gt;Reference lists&lt;/h2&gt;

&lt;p&gt;The quick brown jumped over the lazy.&lt;/p&gt;

&lt;p&gt;Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.&lt;/p&gt;

&lt;h2 id=&quot;full-html&quot;&gt;Full HTML&lt;/h2&gt;

&lt;p&gt;Perhaps the best part of Markdown is that you’re never limited to just Markdown. You can write HTML directly in the Markdown editor and it will just work as HTML usually does. No limits! Here’s a standard YouTube embed code as an example:&lt;/p&gt;

&lt;p&gt;&lt;iframe style=&quot;width:100%;&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;</content><author><name>sal</name></author><category term="Jekyll" /><category term="tutorial" /><category term="featured" /><summary type="html">There are lots of powerful things you can do with the Markdown editor</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/4.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/4.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>